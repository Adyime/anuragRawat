generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]
  reviews       Review[]
  addresses     Address[]
  cart          Cart[]
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  name      String
  phone     String
  address   String
  city      String
  state     String
  pincode   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id              String       @id @default(cuid())
  title           String
  description     String
  price           Float
  discountedPrice Float?
  isEbook         Boolean      @default(false)
  ebookPrice      Float?
  ebookDiscounted Float?
  isFree          Boolean      @default(false)
  language        Language     @default(ENGLISH)
  stock           Int          @default(0)
  images          String[]
  pdfUrl          String?
  categoryId      String
  category        Category     @relation(fields: [categoryId], references: [id])
  subcategoryId   String?
  subcategory     Subcategory? @relation(fields: [subcategoryId], references: [id])
  reviews         Review[]
  orderItems      OrderItem[]
  cartItems       CartItem[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Category {
  id            String        @id @default(cuid())
  name          String        @unique
  description   String?
  products      Product[]
  subcategories Subcategory[]
  coupons       Coupon[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Subcategory {
  id          String    @id @default(cuid())
  name        String
  description String?
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([name, categoryId])
}

model Order {
  id                String        @id @default(cuid())
  userId            String
  user              User          @relation(fields: [userId], references: [id])
  items             OrderItem[]
  total             Float
  status            OrderStatus   @default(PENDING)
  paymentMethod     PaymentMethod
  paymentStatus     PaymentStatus @default(PENDING)
  address           String
  couponId          String?
  coupon            Coupon?       @relation(fields: [couponId], references: [id])
  razorpayOrderId   String?
  razorpayPaymentId String?
  shipmentDetails   Json?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  isEbook   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coupon {
  id              String    @id @default(cuid())
  code            String    @unique
  description     String?
  discountPercent Float
  maxDiscount     Float
  minOrderValue   Float
  usageLimit      Int
  usedCount       Int       @default(0)
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean   @default(true)
  categoryId      String?
  category        Category? @relation(fields: [categoryId], references: [id])
  orders          Order[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Cart {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  isEbook   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum Language {
  ENGLISH
  HINDI
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  ONLINE
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}
